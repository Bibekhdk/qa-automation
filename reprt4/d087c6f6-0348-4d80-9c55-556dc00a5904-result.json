{"name": "Test to edit a merchant's email and verify success", "status": "failed", "statusDetails": {"message": "AssertionError: Toast message not found or took too long to appear.", "trace": "self = <pages.merchant.edit_merchant_page.EditMerchantPage object at 0x736aebb53150>\n\n    @allure.step(\"Get toast message after update\")\n    def get_toast_message(self):\n        try:\n            # Wait for the toast message to be visible\n>           toast = self.wait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"Toastify__toast-body\")))\n\npages/merchant/edit_merchant_page.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1569ed0e7d6e93e96fdf50cf6af8a6c5\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x736aebb5c0e0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5e18f3fc375a <unknown>\nE       #1 0x5e18f3a660a0 <unknown>\nE       #2 0x5e18f3ab79b0 <unknown>\nE       #3 0x5e18f3ab7ba1 <unknown>\nE       #4 0x5e18f3b05ea4 <unknown>\nE       #5 0x5e18f3add3cd <unknown>\nE       #6 0x5e18f3b032a0 <unknown>\nE       #7 0x5e18f3add173 <unknown>\nE       #8 0x5e18f3aa9d4b <unknown>\nE       #9 0x5e18f3aaa9b1 <unknown>\nE       #10 0x5e18f3f8890b <unknown>\nE       #11 0x5e18f3f8c80a <unknown>\nE       #12 0x5e18f3f70662 <unknown>\nE       #13 0x5e18f3f8d394 <unknown>\nE       #14 0x5e18f3f5549f <unknown>\nE       #15 0x5e18f3fb1538 <unknown>\nE       #16 0x5e18f3fb1716 <unknown>\nE       #17 0x5e18f3fc25c6 <unknown>\nE       #18 0x753429c9caa4 <unknown>\nE       #19 0x753429d29c3c <unknown>\n\n../seleniumtest/venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_edit_merchant.TestEditMerchant object at 0x736aecbf3c50>\n\n    @allure.title(\"Test to edit a merchant's email and verify success\")\n    def test_edit_merchant_email(self):\n        driver = self.driver\n    \n        # Step 1: Login\n        driver.get(TestData.BASE_URL)\n        login_page = LoginPage(driver)\n        login_page.login(TestData.USERNAME, TestData.PASSWORD)\n    \n        # Step 2: Go to merchant page\n        self.wait.until(EC.element_to_be_clickable(\n            (By.XPATH, \"//span[contains(text(), 'Merchant')]\"))).click()\n    \n        time.sleep(3)  # Allow page to settle\n    \n        # Step 3: Edit Flow\n        edit_page = EditMerchantPage(driver)\n        edit_page.click_more_options()\n        edit_page.click_edit_option()\n    \n        new_email = edit_page.generate_random_email()\n        edit_page.update_email(new_email)\n        edit_page.click_update_button()\n    \n        time.sleep(3)  # Wait for toast to appear\n        edit_page.capture_screenshot_after_update()\n    \n        # Step 4: Validate toast message\n        try:\n>           toast_message = edit_page.get_toast_message()\n\nTests/merchant/test_edit_merchant.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.merchant.edit_merchant_page.EditMerchantPage object at 0x736aebb53150>\n\n    @allure.step(\"Get toast message after update\")\n    def get_toast_message(self):\n        try:\n            # Wait for the toast message to be visible\n            toast = self.wait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"Toastify__toast-body\")))\n            toast_text = toast.text\n            allure.attach(toast_text, name=\"Toast Message\", attachment_type=allure.attachment_type.TEXT)\n            return toast_text\n        except TimeoutException:\n            # Attach a screenshot in case of failure\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Error Fetching Toast Message\", attachment_type=allure.attachment_type.PNG)\n>           raise AssertionError(\"Toast message not found or took too long to appear.\")\nE           AssertionError: Toast message not found or took too long to appear.\n\npages/merchant/edit_merchant_page.py:73: AssertionError"}, "steps": [{"name": "Login with username: 'admin1', password: '@dmin2929A'", "status": "passed", "parameters": [{"name": "username", "value": "'admin1'"}, {"name": "password", "value": "'@dmin2929A'"}], "start": 1747826435146, "stop": 1747826435632}, {"name": "Clicking 'More Options' for merchant", "status": "passed", "start": 1747826440133, "stop": 1747826440339}, {"name": "Clicking 'Edit' option from dropdown", "status": "passed", "start": 1747826440339, "stop": 1747826440556}, {"name": "Generate a random email address", "status": "passed", "attachments": [{"name": "Generated Email", "source": "5fb3c20e-ea58-4185-a443-611bbcbf7007-attachment.txt", "type": "text/plain"}], "start": 1747826440557, "stop": 1747826440557}, {"name": "Updating email to: '1t2ta8@test.com'", "status": "passed", "parameters": [{"name": "new_email", "value": "'1t2ta8@test.com'"}], "start": 1747826440557, "stop": 1747826441142}, {"name": "Clicking 'Update' button", "status": "passed", "start": 1747826441142, "stop": 1747826441298}, {"name": "Capturing screenshot after update", "status": "passed", "attachments": [{"name": "After Update Screenshot", "source": "71921582-315f-4aa0-a6f8-39085d4b8438-attachment.png", "type": "image/png"}], "start": 1747826444299, "stop": 1747826444489}, {"name": "Get toast message after update", "status": "failed", "statusDetails": {"message": "AssertionError: Toast message not found or took too long to appear.\n", "trace": "  File \"/home/bibek-hadkhale/Desktop/seleniumtest/venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/bibek-hadkhale/Desktop/IPN-AUTOMATION/pages/merchant/edit_merchant_page.py\", line 73, in get_toast_message\n    raise AssertionError(\"Toast message not found or took too long to appear.\")\n"}, "attachments": [{"name": "Error Fetching Toast Message", "source": "4be3c383-7029-4089-a474-433489ca3d59-attachment.png", "type": "image/png"}], "start": 1747826444489, "stop": 1747826455770}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1747826433911, "stop": 1747826455772, "uuid": "8abacec7-e3dd-4c1e-b267-e881ad148ed1", "historyId": "6a77d28e182c732ac55c012dfbf7454e", "testCaseId": "80b42ae8851199f3f49bd5de9898e940", "fullName": "Tests.merchant.test_edit_merchant.TestEditMerchant#test_edit_merchant_email", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Tests.merchant"}, {"name": "suite", "value": "test_edit_merchant"}, {"name": "subSuite", "value": "TestEditMerchant"}, {"name": "host", "value": "bibek-hadkhale-Nitro-AN515-44"}, {"name": "thread", "value": "172144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.merchant.test_edit_merchant"}]}